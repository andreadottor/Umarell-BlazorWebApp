@implements IMarkerInfoComponent

<div @ref="MarkerInfoElement" style="display: none;">
    @if (SelectedItem is not null)
    {
        <h2>@SelectedItem.Title</h2>
        <p>
            Data di inizio lavori:
            <strong>@SelectedItem.StartDate.ToString("dd MMMM yyyy")</strong>
        </p>
        @if (!string.IsNullOrWhiteSpace(SelectedItem.FileName))
        {
            <img src="/api/v1/building-sites/image/@SelectedItem.Id" alt="@SelectedItem.FileName" style="width: 100%;" />
        }
        else
        {
            <div class="text-center">
                <img src="/images/umarell_logo.png" alt="umarell logo" width="50" />
                <h5>Immagine non caricata</h5>
            </div>
        }
@*      <div class="mt-3">
            <button type="button" class="btn btn-secondary" name="edit">Edit</button>
            <button type="button" class="btn btn-danger" name="delete">Delete</button>
        </div> *@
    }
    else
    {
        <span>Cantiere non valido</span>
    }
</div>

@code {
    private BuildingSiteModel? SelectedItem { get; set; }
    public ElementReference MarkerInfoElement { get; private set; }

    [CascadingParameter]
    public IMarkerInfoContainer? MapContainer { get; set; }

    protected override void OnInitialized()
    {
        if (MapContainer is null)
            throw new WrongParentException(typeof(MapMarkerInfo), typeof(IMarkerInfoContainer));

        MapContainer.SetMarkerInfoRef(this);
    }

    public void SetItem(BuildingSiteModel buildingSite)
    {
        SelectedItem = buildingSite;
        StateHasChanged();
    }

    public Task ButtonClickAsync(Guid buildingSiteId, string action)
    {
        return Task.CompletedTask;
    }
}
